# -*- coding: utf-8 -*-
"""CODECHEF-RECRUITMENT-1ST YEARS-Q1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/whattheprak/d040fb7f5a8f94bbbd927bf01be5ec1c/codechef-recruitment-1st-years-q1.ipynb
"""



"""## Q1
## Third Largest Element
## Write a function that returns the third largest element of a list of integers. (Assume all elements in l will be distinct)
"""

import sys 
def thirdLargest(arr, arr_size): 
  
  
    if (arr_size < 3): 
      
        print(" Invalid Input ") 
        return
      
  
  
    first = arr[0] 
    for i in range(1, arr_size): 
        if (arr[i] > first): 
            first = arr[i] 
  
   
    second = -sys.maxsize 
    for i in range(0, arr_size): 
        if (arr[i] > second and 
            arr[i] < first): 
            second = arr[i] 
  

    third = -sys.maxsize 
    for i in range(0, arr_size): 
        if (arr[i] > third and
            arr[i] < second): 
            third = arr[i] 
  
    print("The Third Largest",  
          "element is", third) 
  

arr = [1,2,3,4]
n = len(arr) 
thirdLargest(arr, n)

## l=[1,2,3,4]
## third_largest_element(l)
## for testing 
## output should be 2



"""
## Q2
## Taylor Series
## Taylor Series expansion of $e^x$ upto $n$ terms is as follows
$$
e^x = \sum_{i=0}^{n}{\frac{x^i}{i!}}
$$where $i!$ is factorial of $i$ i.e., $1*2*3*\ldots*i$

Write a function that takes arguments $n$ and $x$ and finds value of taylor expansion of $e^x$ upto $n$ terms
"""

def exponential(n, x): 
  
   
    sum = 1.0 
    for i in range(n, 0, -1): 
        sum = 1 + x * sum / i 
    print ("e^x =", sum) 
  

n = 10
x = 1.0
exponential(n, x)

## n=10
## x=1.0
## taylor_expansion_ex(x,n)
## Output should be: 2.7182818011463845

"""
## Q3
## Armstrong numbers
## Armstrong number is a number that is equal to the sum of cubes of its digits.
For eg., $153 = 1^3 + 5^3 + 3^3$

Write a function that takes an argument $n$ and returns list of armstrong numbers between $0$ and $n$ (including $0$ and $n$)(List should be sorted in ascending order)
"""

lower = int(input("Enter lower range: "))  
upper = int(input("Enter upper range: "))  
  
for num in range(lower,upper + 1):  
   sum = 0  
   temp = num  
   while temp > 0:  
       digit = temp % 10  
       sum += digit ** 3  
       temp //= 10  
       if num == sum:  
            print(num)

## n=10000
## armstrong_numbers(n)

## Output should be: 
## [153, 370, 371, 407, 1634, 8208, 9474]

"""## Q4
## Remove all occurences
## Given a list $l$ and element $e$, remove all occurences of $e$ from $l$ and return it.
"""

l = [1,2,3,4,2,2,2,2]
val = 0
l.remove(val)
print(l)

## l=[1,2,3,4,2,2,2,2]
## e=2
## remove_occurences(l,e)
## Output should be:
##[1, 3, 4]

"""## Q5
## Adder function
# Write a function that takes an input $a$ and returns a function $f$.
$f$ should take an input $n$ and return the sum of $a$ and $n$.
"""

def get_adder(x):
    def adder(y):
      return x+y
  return adder
n=int(input('Enter first number:'))
add_n = get_adder(n)

x=int(input('Enter second number:'))
print add_n(x)

## a=get_adder(2)
## a(3)
## Output should be: 5